//       ___  _____  ____
//      / _ \/  _/ |/_/ /____ ______ _
//     / ___// /_>  </ __/ -_) __/  ' \
//    /_/  /___/_/|_|\__/\__/_/ /_/_/_/
//
//    Copyright 2017 Eliuk Blau
//
//    This Source Code Form is subject to the terms of the Mozilla Public
//    License, v. 2.0. If a copy of the MPL was not distributed with this
//    file, You can obtain one at http://mozilla.org/MPL/2.0/.

package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"runtime"
	"strings"

	"github.com/eliukblau/pixterm/pkg/ansimage"
	"github.com/lucasb-eyer/go-colorful"
	"golang.org/x/crypto/ssh/terminal"
)

const (
	pxtVersion = "1.3.0"
	pxtLogo    = `

   ___  _____  ____
  / _ \/  _/ |/_/ /____ ______ _    Made with love by Eliuk Blau
 / ___// /_>  </ __/ -_) __/  ' \   github.com/eliukblau/pixterm
/_/  /___/_/|_|\__/\__/_/ /_/_/_/              {{VERSION}}

`
)

var (
	flagCredits bool
	flagDither  uint
	flagGo      bool
	flagMatte   string
	flagNoBg    bool
	flagScale   uint
	flagRows    uint
	flagCols    uint
)

func main() {
	validateFlags()
	runPixterm()
}

func printLogo() {
	fmt.Print(strings.Trim(strings.Replace(pxtLogo, "{{VERSION}}", pxtVersion, 1), "\n"), "\n\n")
}

func printIcon() {
	fmt.Printf("%s%s%s", "\033[48;2;255;114;232m\033[38;2;255;120;230m▄\033[48;2;255;118;230m\033[38;2;255;125;228m▄\033[48;2;255;124;228m\033[38;2;255;130;225m▄\033[48;2;255;130;226m\033[38;2;255;136;223m▄\033[48;2;255;135;224m\033[38;2;255;143;221m▄\033[48;2;255;142;221m\033[38;2;255;149;217m▄\033[48;2;255;148;217m\033[38;2;255;157;214m▄\033[48;2;255;156;215m\033[38;2;255;163;211m▄\033[48;2;255;162;211m\033[38;2;255;172;208m▄\033[48;2;255;171;208m\033[38;2;255;179;204m▄\033[48;2;255;177;204m\033[38;2;253;185;202m▄\033[48;2;254;184;202m\033[38;2;249;193;198m▄\033[48;2;249;192;199m\033[38;2;244;200;195m▄\033[48;2;246;199;196m\033[38;2;239;207;192m▄\033[48;2;240;206;192m\033[38;2;235;213;188m▄\033[48;2;236;212;189m\033[38;2;229;220;186m▄\033[48;2;231;219;187m\033[38;2;0;0;167m▄\033[48;2;226;225;184m\033[38;2;219;232;181m▄\033[48;2;220;231;181m\033[38;2;212;238;179m▄\033[48;2;213;237;179m\033[38;2;208;241;176m▄\033[48;2;208;241;176m\033[38;2;203;245;175m▄\033[48;2;203;245;174m\033[38;2;198;249;172m▄\033[48;2;198;248;174m\033[38;2;191;251;172m▄\033[48;2;192;251;171m\033[38;2;187;254;171m▄\033[0m  ", `   ___  _____  ____`, "\n")
	fmt.Printf("%s%s%s", "\033[48;2;255;125;227m\033[38;2;255;132;224m▄\033[48;2;255;132;225m\033[38;2;255;139;223m▄\033[48;2;255;137;222m\033[38;2;255;144;218m▄\033[48;2;255;144;219m\033[38;2;255;152;215m▄\033[48;2;255;150;216m\033[38;2;255;159;213m▄\033[48;2;255;158;214m\033[38;2;255;167;211m▄\033[48;2;255;165;211m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;255;105;235m▄\033[48;2;255;179;203m\033[38;2;0;0;167m▄\033[48;2;253;187;201m\033[38;2;248;195;196m▄\033[48;2;248;194;197m\033[38;2;243;202;194m▄\033[48;2;244;201;194m\033[38;2;239;209;191m▄\033[48;2;239;208;192m\033[38;2;232;216;187m▄\033[48;2;233;215;188m\033[38;2;227;222;185m▄\033[48;2;229;221;186m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;177;255;171m▄\033[48;2;207;242;176m\033[38;2;0;0;167m▄\033[48;2;201;245;174m\033[38;2;194;250;172m▄\033[48;2;196;249;172m\033[38;2;188;252;171m▄\033[48;2;192;252;172m\033[38;2;184;254;171m▄\033[48;2;186;254;171m\033[38;2;179;255;171m▄\033[48;2;180;255;171m\033[38;2;175;255;172m▄\033[0m  ", `  / _ \/  _/ |/_/ /____ ______ _`, "\n")
	fmt.Printf("%s%s%s", "\033[48;2;255;140;221m\033[38;2;255;147;217m▄\033[48;2;255;146;218m\033[38;2;255;154;215m▄\033[48;2;255;153;215m\033[38;2;255;161;212m▄\033[48;2;255;160;213m\033[38;2;255;169;209m▄\033[48;2;255;168;210m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;177;255;171m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;242;203;194m\033[38;2;235;211;189m▄\033[48;2;238;210;191m\033[38;2;232;218;187m▄\033[48;2;232;217;187m\033[38;2;227;224;184m▄\033[48;2;227;224;185m\033[38;2;222;230;182m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;143;59;195m\033[38;2;143;59;195m▄\033[48;2;143;59;195m\033[38;2;4;4;163m▄\033[48;2;0;0;167m\033[38;2;96;255;96m▄\033[48;2;177;255;171m\033[38;2;177;255;171m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;190;252;172m\033[38;2;182;255;171m▄\033[48;2;184;254;171m\033[38;2;177;255;171m▄\033[48;2;179;255;171m\033[38;2;174;255;172m▄\033[48;2;176;254;171m\033[38;2;170;253;172m▄\033[48;2;170;253;172m\033[38;2;166;251;174m▄\033[0m  ", ` / ___// /_>  </ __/ -_) __/  ' \`, "\n")
	fmt.Printf("%s%s%s", "\033[48;2;255;156;214m\033[38;2;255;163;211m▄\033[48;2;255;162;212m\033[38;2;255;172;209m▄\033[48;2;255;171;208m\033[38;2;255;179;204m▄\033[48;2;255;177;205m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;143;59;195m▄\033[48;2;143;59;195m\033[38;2;4;4;163m▄\033[48;2;0;0;167m\033[38;2;95;126;169m▄\033[48;2;177;255;171m\033[38;2;177;255;171m▄\033[48;2;177;255;171m\033[38;2;177;255;171m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;226;225;184m\033[38;2;4;4;163m▄\033[48;2;0;0;167m\033[38;2;143;59;195m▄\033[48;2;0;0;167m\033[38;2;143;59;195m▄\033[48;2;0;0;167m\033[38;2;143;59;195m▄\033[48;2;4;4;163m\033[38;2;4;4;163m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;58;126;136m\033[38;2;0;0;167m▄\033[48;2;177;255;171m\033[38;2;96;255;96m▄\033[48;2;96;255;96m\033[38;2;96;255;96m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;174;255;171m\033[38;2;168;253;173m▄\033[48;2;170;253;173m\033[38;2;165;250;176m▄\033[48;2;164;251;174m\033[38;2;162;247;177m▄\033[48;2;159;248;177m\033[38;2;157;244;179m▄\033[0m  ", `/_/  /___/_/|_|\__/\__/_/ /_/_/_/`, "\n")
	// ---
	fmt.Print("\033[48;2;255;173;208m\033[38;2;255;181;203m▄\033[48;2;255;179;204m\033[38;2;253;188;200m▄\033[48;2;252;187;201m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;143;59;195m▄\033[48;2;143;59;195m\033[38;2;0;0;167m▄\033[48;2;4;4;163m\033[38;2;58;126;136m▄\033[48;2;58;126;136m\033[38;2;58;126;136m▄\033[48;2;177;255;171m\033[38;2;96;255;96m▄\033[48;2;177;255;171m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;255;105;235m▄\033[48;2;143;59;195m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;143;59;195m\033[38;2;255;105;235m▄\033[48;2;143;59;195m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;163;251;176m\033[38;2;159;246;178m▄\033[48;2;160;247;178m\033[38;2;155;242;180m▄\033[48;2;156;243;180m\033[38;2;153;238;184m▄\033[48;2;152;239;183m\033[38;2;149;234;186m▄\033[0m\n")
	// ---
	fmt.Printf("%s%s%s", "\033[48;2;251;189;200m\033[38;2;246;197;196m▄\033[48;2;247;196;196m\033[38;2;241;205;193m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;143;59;195m\033[38;2;143;59;195m▄\033[48;2;4;4;163m\033[38;2;4;4;163m▄\033[48;2;58;126;136m\033[38;2;0;0;167m▄\033[48;2;58;126;136m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;150;238;184m\033[38;2;147;231;188m▄\033[48;2;148;233;187m\033[38;2;146;226;192m▄\033[48;2;145;227;191m\033[38;2;142;219;195m▄\033[0m    ", "Made with love by Eliuk Blau", "\n")
	fmt.Printf("%s%s%s", "\033[48;2;240;206;192m\033[38;2;235;213;188m▄\033[48;2;235;213;188m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;143;59;195m▄\033[48;2;143;59;195m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;0;0;167m▄\033[48;2;255;105;235m\033[38;2;0;0;167m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;141;218;196m\033[38;2;137;211;200m▄\033[48;2;138;212;200m\033[38;2;135;203;204m▄\033[0m    ", "github.com/eliukblau/pixterm", "\n")
	fmt.Printf("%s%s%s", "\033[48;2;229;222;185m\033[38;2;222;228;182m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;143;59;195m\033[38;2;143;59;195m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;58;126;136m▄\033[48;2;0;0;167m\033[38;2;58;126;136m▄\033[48;2;0;0;167m\033[38;2;58;126;136m▄\033[48;2;255;105;235m\033[38;2;0;0;167m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;58;126;136m\033[38;2;0;0;167m▄\033[48;2;58;126;136m\033[38;2;96;255;96m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;255;105;235m▄\033[48;2;134;202;205m\033[38;2;0;0;167m▄\033[48;2;133;196;209m\033[38;2;128;187;214m▄\033[0m      ", `  _  _`, "\n")
	fmt.Printf("%s%s%s", "\033[48;2;217;235;180m\033[38;2;210;240;176m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;143;59;195m\033[38;2;143;59;195m▄\033[48;2;143;59;195m\033[38;2;143;59;195m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;96;255;96m\033[38;2;96;255;96m▄\033[48;2;0;0;167m\033[38;2;177;255;171m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;255;255;255m▄\033[48;2;96;255;96m\033[38;2;177;255;171m▄\033[48;2;177;255;171m\033[38;2;177;255;171m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;126;178;220m\033[38;2;124;170;224m▄\033[0m      ", fmt.Sprintf("/` \\/ `\\_  _      %s", pxtVersion), "\n")
	fmt.Printf("%s%s%s", "\033[48;2;203;245;174m\033[38;2;197;248;173m▄\033[48;2;198;248;174m\033[38;2;192;252;171m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;143;59;195m\033[38;2;143;59;195m▄\033[48;2;143;59;195m\033[38;2;143;59;195m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;255;105;235m▄\033[48;2;255;255;255m\033[38;2;177;255;171m▄\033[48;2;0;0;167m\033[38;2;177;255;171m▄\033[48;2;177;255;171m\033[38;2;177;255;171m▄\033[48;2;177;255;171m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;177;255;171m\033[38;2;255;105;235m▄\033[48;2;177;255;171m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;122;160;228m\033[38;2;120;152;233m▄\033[0m      ", "\\ UwU /` \\/ `\\", "\n")
	fmt.Printf("%s%s%s", "\033[48;2;190;252;171m\033[38;2;184;254;171m▄\033[48;2;185;253;171m\033[38;2;179;254;171m▄\033[48;2;180;255;171m\033[38;2;175;255;171m▄\033[48;2;0;0;167m\033[38;2;171;254;172m▄\033[48;2;143;59;195m\033[38;2;0;0;167m▄\033[48;2;143;59;195m\033[38;2;143;59;195m▄\033[48;2;143;59;195m\033[38;2;143;59;195m▄\033[48;2;255;105;235m\033[38;2;143;59;195m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;255;105;235m\033[38;2;255;105;235m▄\033[48;2;0;0;167m\033[38;2;0;0;167m▄\033[48;2;119;151;234m\033[38;2;115;143;238m▄\033[48;2;116;144;238m\033[38;2;114;136;242m▄\033[0m      ", ` '.  .\ OwO  /`, "\n")
	fmt.Printf("%s%s%s", "\033[48;2;179;255;171m\033[38;2;174;255;172m▄\033[48;2;174;254;172m\033[38;2;170;253;172m▄\033[48;2;171;254;173m\033[38;2;166;251;174m▄\033[48;2;168;251;174m\033[38;2;161;249;176m▄\033[48;2;161;249;176m\033[38;2;158;245;178m▄\033[48;2;0;0;167m\033[38;2;154;241;181m▄\033[48;2;0;0;167m\033[38;2;150;237;185m▄\033[48;2;143;59;195m\033[38;2;0;0;167m▄\033[48;2;143;59;195m\033[38;2;143;59;195m▄\033[48;2;143;59;195m\033[38;2;143;59;195m▄\033[48;2;255;105;235m\033[38;2;143;59;195m▄\033[48;2;255;105;235m\033[38;2;143;59;195m▄\033[48;2;255;105;235m\033[38;2;143;59;195m▄\033[48;2;255;105;235m\033[38;2;143;59;195m▄\033[48;2;255;105;235m\033[38;2;143;59;195m▄\033[48;2;255;105;235m\033[38;2;143;59;195m▄\033[48;2;255;105;235m\033[38;2;143;59;195m▄\033[48;2;255;105;235m\033[38;2;0;0;167m▄\033[48;2;255;105;235m\033[38;2;0;0;167m▄\033[48;2;0;0;167m\033[38;2;117;148;235m▄\033[48;2;0;0;167m\033[38;2;117;140;240m▄\033[48;2;118;141;240m\033[38;2;113;134;243m▄\033[48;2;114;135;243m\033[38;2;112;128;246m▄\033[48;2;113;129;246m\033[38;2;111;121;249m▄\033[0m      ", `   \/  '.  .'    Thanks!`, "\n")
	fmt.Printf("%s%s%s", "\033[48;2;168;253;173m\033[38;2;164;251;174m▄\033[48;2;164;251;174m\033[38;2;159;248;177m▄\033[48;2;161;248;177m\033[38;2;155;244;179m▄\033[48;2;156;245;179m\033[38;2;152;239;183m▄\033[48;2;155;240;182m\033[38;2;149;236;186m▄\033[48;2;151;236;185m\033[38;2;146;230;190m▄\033[48;2;146;231;188m\033[38;2;143;224;193m▄\033[48;2;143;224;193m\033[38;2;141;218;196m▄\033[48;2;0;0;167m\033[38;2;137;211;201m▄\033[48;2;0;0;167m\033[38;2;134;204;204m▄\033[48;2;0;0;167m\033[38;2;132;197;209m▄\033[48;2;4;4;163m\033[38;2;131;189;212m▄\033[48;2;0;0;167m\033[38;2;128;182;217m▄\033[48;2;0;0;167m\033[38;2;126;175;222m▄\033[48;2;4;4;163m\033[38;2;122;168;225m▄\033[48;2;0;0;167m\033[38;2;122;159;229m▄\033[48;2;0;0;167m\033[38;2;119;153;232m▄\033[48;2;119;154;233m\033[38;2;117;145;238m▄\033[48;2;117;146;236m\033[38;2;116;138;241m▄\033[48;2;116;139;240m\033[38;2;113;132;244m▄\033[48;2;114;133;244m\033[38;2;110;126;247m▄\033[48;2;111;127;247m\033[38;2;109;120;250m▄\033[48;2;109;121;250m\033[38;2;107;115;253m▄\033[48;2;107;115;252m\033[38;2;106;110;255m▄\033[0m      ", `         \/`, "\n\n")
}

func printCredits() {
	if isTerminal() {
		printIcon()
	} else {
		printLogo()
	}

	fmt.Print("CONTRIBUTORS:\n\n")

	fmt.Print("  > @disq - http://github.com/disq\n")
	fmt.Print("      + Original code for image transparency support.\n")
	fmt.Println()

	fmt.Print("  > @timob - http://github.com/timob\n")
	fmt.Print("      + Fix for ANSIpixel type: use 8bit color component for output.\n")
	fmt.Println()

	fmt.Print("  > @HongjiangHuang - http://github.com/HongjiangHuang\n")
	fmt.Print("      + Original code for image download support.\n")
	fmt.Println()

	fmt.Print("  > @brutestack - http://github.com/brutestack\n")
	fmt.Print("      + Color support for Windows (Command Prompt & PowerShell).\n")
	fmt.Print("      + Original code for disable background color in dithering mode.\n")
	fmt.Print("      + Original code for output Go code to 'fmt.Print()' the image.\n")
	fmt.Println()

	fmt.Print("  > @diamondburned - http://github.com/diamondburned\n")
	fmt.Print("      + NewFromImage() & NewScaledFromImage() for ANSImage API.\n")
	fmt.Println()

	fmt.Print("  > @danirod - http://github.com/danirod\n")
	fmt.Print("  > @Xpktro - http://github.com/Xpktro\n")
	fmt.Print("      + Moral support.\n")
	fmt.Println()
}

func throwError(code int, v ...interface{}) {
	printLogo()
	log.New(os.Stderr, "[PIXTERM ERROR] ", log.LstdFlags).Println(v...)
	os.Exit(code)
}

func configureFlags() {
	flag.CommandLine.Usage = func() {
		printLogo()

		_, file := filepath.Split(os.Args[0])
		fmt.Print("USAGE:\n\n")
		fmt.Printf("  %s [options] image/url\n\n", file)

		fmt.Print("  Supported image formats: JPEG, PNG, GIF, BMP, TIFF, WebP.\n")
		fmt.Print("  Supported URL protocols: HTTP, HTTPS.\n\n")

		fmt.Print("OPTIONS:\n\n")
		flag.CommandLine.SetOutput(os.Stdout)
		flag.CommandLine.PrintDefaults()
		flag.CommandLine.SetOutput(ioutil.Discard) // hide flag errors
		fmt.Print("  -help\n\tprints this message :D LOL\n")
		fmt.Println()
	}

	flag.CommandLine.SetOutput(ioutil.Discard) // hide flag errors
	flag.CommandLine.Init(os.Args[0], flag.ExitOnError)

	flag.CommandLine.BoolVar(&flagCredits, "credits", false, "shows some love to contributors <3")
	flag.CommandLine.UintVar(&flagDither, "d", 0, "dithering `mode`:\n   0 - no dithering (default)\n   1 - with blocks\n   2 - with chars")
	flag.CommandLine.BoolVar(&flagGo, "go", false, "output Go code to 'fmt.Print()' the image")
	flag.CommandLine.StringVar(&flagMatte, "m", "", "matte `color` for transparency or background\n(optional, hex format, default: 000000)")
	flag.CommandLine.BoolVar(&flagNoBg, "nobg", false, "disable background color\n(optional, only in dithering mode, ignores matte color)")
	flag.CommandLine.UintVar(&flagScale, "s", 0, "scale `method`:\n   0 - resize (default)\n   1 - fill\n   2 - fit")
	flag.CommandLine.UintVar(&flagRows, "tr", 0, "terminal `rows` (optional, >=2; when piping, default: 24)")
	flag.CommandLine.UintVar(&flagCols, "tc", 0, "terminal `columns` (optional, >=2; when piping, default: 80)")

	flag.CommandLine.Parse(os.Args[1:])
}

func validateFlags() {
	if flagCredits {
		printCredits()
		os.Exit(0)
	}

	if flagDither != 0 && flagDither != 1 && flagDither != 2 {
		flag.CommandLine.Usage()
		os.Exit(2)
	}

	if flagScale != 0 && flagScale != 1 && flagScale != 2 {
		flag.CommandLine.Usage()
		os.Exit(2)
	}

	if (flagRows > 0 && flagRows < 2) || (flagCols > 0 && flagCols < 2) {
		flag.CommandLine.Usage()
		os.Exit(2)
	}

	// this is image filename
	if flag.CommandLine.Arg(0) == "" {
		flag.CommandLine.Usage()
		os.Exit(2)
	}
}

func isTerminal() bool {
	return terminal.IsTerminal(int(os.Stdout.Fd()))
}

func getTerminalSize() (width, height int, err error) {
	if isTerminal() {
		return terminal.GetSize(int(os.Stdout.Fd()))
	}
	// fallback when piping to a file!
	return 80, 24, nil // VT100 terminal size
}

func runPixterm() {
	var (
		pix *ansimage.ANSImage
		err error
	)

	// get terminal size
	tx, ty, err := getTerminalSize()
	if err != nil {
		throwError(1, err)
	}

	// use custom terminal size (if applies)
	if ty--; flagRows != 0 { // no custom rows? subtract 1 for prompt spacing
		ty = int(flagRows) + 1 // weird, but in this case is necessary to add 1 :O
	}
	if flagCols != 0 {
		tx = int(flagCols)
	}

	// get scale mode from flag
	sm := ansimage.ScaleMode(flagScale)

	// get dithering mode from flag
	dm := ansimage.DitheringMode(flagDither)

	// set image scale factor for ANSIPixel grid
	sfy, sfx := ansimage.BlockSizeY, ansimage.BlockSizeX // 8x4 --> with dithering
	if ansimage.DitheringMode(flagDither) == ansimage.NoDithering {
		sfy, sfx = 2, 1 // 2x1 --> without dithering
	}

	// get matte color
	if flagMatte == "" {
		flagMatte = "000000" // black background
	}
	mc, err := colorful.Hex("#" + flagMatte) // RGB color from Hex format
	if err != nil {
		throwError(2, fmt.Sprintf("matte color : %s is not a hex-color", flagMatte))
	}

	// create new ANSImage from file
	file := flag.CommandLine.Arg(0)
	if matched, _ := regexp.MatchString(`^https?://`, file); matched {
		pix, err = ansimage.NewScaledFromURL(file, sfy*ty, sfx*tx, mc, sm, dm)
	} else {
		pix, err = ansimage.NewScaledFromFile(file, sfy*ty, sfx*tx, mc, sm, dm)
	}
	if err != nil {
		throwError(1, err)
	}

	// draw ANSImage to terminal
	if isTerminal() {
		ansimage.ClearTerminal()
	}
	pix.SetMaxProcs(runtime.NumCPU()) // maximum number of parallel goroutines!
	pix.DrawExt(flagGo, flagNoBg)
	if isTerminal() {
		fmt.Println()
	}
}

func init() {
	runtime.GOMAXPROCS(runtime.NumCPU()) // use paralelism for goroutines!
	configureFlags()
}
